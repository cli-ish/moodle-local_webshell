{"version":3,"file":"shell.min.js","sources":["../src/shell.js"],"sourcesContent":["/**\n * Shell Component.\n *\n * @module     local_webshell/shell\n * @class      local_webshell/shell\n * @copyright  2024 Vincent Schneider (cli-ish)\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport ajax from 'core/ajax';\n\nexport default class Component {\n    /**\n     * Init the component.\n     */\n    constructor() {\n        this.history = this._fetchHistory();\n        this.selectionArrow = this.history.length;\n        this.resultbox = document.querySelector('body .local_webshell .shell-result');\n        this.inputbox = document.querySelector('body .local_webshell .shell-input');\n        this.stateReady();\n    }\n\n    /**\n     * Static method to create a component instance from the mustache template.\n     *\n     * @return {Component}\n     */\n    static init() {\n        return new Component();\n    }\n\n    /**\n     * Update workingdir/username if changed.\n     * @param {object} result\n     * @private\n     */\n    _updateUi(result) {\n        this.inputbox.querySelector('.username').innerText = result.user;\n        this.inputbox.querySelector('.workingdir').innerText = result.workingdir;\n    }\n\n    /**\n     * Print the result of the command execution.\n     * @param {string} command\n     * @param {object} result\n     * @private\n     */\n    _printResult(command, result) {\n        const cmdNode = document.createElement('div');\n        cmdNode.innerHTML = '<div class=\"cmdline\"><span class=\"username\">' + result.user + ':</span><span class=\"workingdir\">' +\n            result.workingdir + '</span><span class=\"arg\">#</span> ' + command + '</div>';\n        this.resultbox.appendChild(cmdNode);\n        const resultNode = document.createElement('div');\n        resultNode.textContent += atob(result.result); // This is not deprecated in this context.\n        this.resultbox.appendChild(resultNode);\n        this.resultbox.scrollTop = this.resultbox.scrollHeight;\n    }\n\n    /**\n     * Execute command and fetch result.\n     * @param {string} command\n     * @param {function} callback\n     * @private\n     */\n    _execCommand(command, callback) {\n        let promises = ajax.call([\n            {\n                methodname: 'local_webshell_run',\n                args: {\n                    command: command,\n                }\n            }\n        ]);\n        promises[0].done(function(response) {\n            // Todo: handle errors?\n            callback(response);\n        });\n    }\n\n    /**\n     * Query hinting webservice.\n     * @param {string} value\n     * @param {string} type\n     * @param {function} callback\n     * @private\n     */\n    _hinting(value, type, callback) {\n        let promises = ajax.call([\n            {\n                methodname: 'local_webshell_hinting',\n                args: {\n                    value: value,\n                    type: type\n                }\n            }\n        ]);\n        promises[0].done(function(response) {\n            // Todo: handle errors?\n            callback(response);\n        });\n    }\n\n    /**\n     * Initial state ready method.\n     */\n    stateReady() {\n        let that = this;\n        this.inputbox.querySelector('#shell-cmd').addEventListener('keydown', e => {\n            let command = '';\n            switch (event.key) {\n                case 'Enter':\n                    command = e.target.value;\n                    e.target.value = '';\n                    if (command === 'clear') {\n                        that.resultbox.innerHTML = '';\n                        return;\n                    }\n                    this._pushToHistory(command);\n                    this.selectionArrow = this.history.length;\n                    that._execCommand(command, data => {\n                        that._printResult(command, data);\n                        that._updateUi(data);\n                    });\n                    break;\n                case 'ArrowUp':\n                    e.preventDefault();\n                    if (that.selectionArrow - 1 < 0) {\n                        return;\n                    }\n                    that.selectionArrow -= 1;\n                    that.inputbox.querySelector('#shell-cmd').value = that.history[that.selectionArrow];\n                    break;\n                case 'ArrowDown':\n                    e.preventDefault();\n                    if (that.selectionArrow + 1 >= that.history.length) {\n                        that.selectionArrow = that.history.length;\n                        that.inputbox.querySelector('#shell-cmd').value = \"\";\n                        return;\n                    }\n                    that.selectionArrow += 1;\n                    that.inputbox.querySelector('#shell-cmd').value = that.history[that.selectionArrow];\n                    break;\n                case 'Tab':\n                    e.preventDefault();\n                    that._autocomplete(e.target);\n                    break;\n            }\n        });\n    }\n\n    /**\n     * Return a list of history commands.\n     * @return {string[]}\n     * @private\n     */\n    _fetchHistory() {\n        let result = window.localStorage.getItem('moodle-local_webshell/history');\n        if (result === null) {\n            return [];\n        }\n        let data = JSON.parse(result);\n        if (!Array.isArray(data)) {\n            return [];\n        }\n        return data;\n    }\n\n    /**\n     * Add command to history.\n     * @param {string} command\n     * @private\n     */\n    _pushToHistory(command) {\n        this.history.push(command);\n        window.localStorage.setItem('moodle-local_webshell/history', JSON.stringify(this.history));\n    }\n\n    /**\n     * Autocomplete file/directories.\n     * @param {HTMLElement} target\n     * @private\n     */\n    _autocomplete(target) {\n        let command = target.value;\n        if (command.trim().length === 0) {\n            return;\n        }\n        let parts = command.split(' ');\n        let type = (parts.length === 1) ? 'binary' : 'file';\n        let value = (type === 'binary') ? parts[0] : parts[parts.length - 1];\n        let resultStr = '';\n        let that = this;\n        this._hinting(value, type, result => {\n            if (result.matches.length <= 0) {\n                return;\n            }\n            if (result.matches.length === 1) {\n                if (type === 'binary') {\n                    // We can replace the whole string since we know that we don't have more yet!\n                    target.value = result.matches[0];\n                } else {\n                    target.value = command.replace(/(\\S*)$/, result.matches[0]);\n                }\n            } else {\n                resultStr = '';\n                let count = 0;\n                result.matches.forEach(entry => {\n                    resultStr += entry + '\\t';\n                    if (count > 5) {\n                        count = 0;\n                        resultStr += '\\n';\n                    }\n                    count++;\n                });\n                result.result = btoa(resultStr);\n                that._printResult(command, result);\n            }\n        });\n    }\n}"],"names":["Component","constructor","history","this","_fetchHistory","selectionArrow","length","resultbox","document","querySelector","inputbox","stateReady","_updateUi","result","innerText","user","workingdir","_printResult","command","cmdNode","createElement","innerHTML","appendChild","resultNode","textContent","atob","scrollTop","scrollHeight","_execCommand","callback","ajax","call","methodname","args","done","response","_hinting","value","type","that","addEventListener","e","event","key","target","_pushToHistory","data","preventDefault","_autocomplete","window","localStorage","getItem","JSON","parse","Array","isArray","push","setItem","stringify","trim","parts","split","resultStr","matches","replace","count","forEach","entry","btoa"],"mappings":"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"}